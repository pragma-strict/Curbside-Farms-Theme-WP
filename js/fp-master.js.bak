import { updateContentLayout,
         setCurrentContent,
         updateProgressBar,
         contentInit } from './fp-content.js';

import { updateBackgroundSize,
         backgroundInit,
         setBgImage } from './fp-background.js';

         
/**
 * This file contains all the master functions for handling the front page. 
 * It also contains logic relating to the page height, scrolling and the page sections. 
 */


// Constants
const DOC_HEIGHT_DIV_NAME = "tall";
const NUM_PAGE_SECTIONS = 4;
const PAGE_HEIGHT = 4500;

// Globals
let sectionIndex = 0;
let documentHeight = 0;


/*
   Master init function for all front page javascript
*/
function fp_load(){
   // Attach fp functions to events
   window.onscroll = fp_scroll;
   window.onresize = fp_resize;

   // Set up the doc height. This set/calculate combo is only needed to account for possible discrepancy introduced by the stupid WP admin bar.
   setDocumentHeight(PAGE_HEIGHT); 
   calculateDocumentHeight(); 

   // Do some init stuff
   contentInit(NUM_PAGE_SECTIONS);
   calculateScrollPosition();
   updateContentLayout();
   backgroundInit();
   updateBackgroundSize();

   // Add an event listener to the email input box and do an init validation
   var emailFormElement = document.getElementById("form_4_1-element-5");
   if(emailFormElement){
      emailFormElement.addEventListener("input", validateEmailInput);
      validateEmailInput();
   }
}


/*
   Master function for all scrolling functionality on the front page
*/
function fp_scroll(){
   let scrollPercentage = calculateScrollPosition();
   let newSectionIndex = calculateSectionIndex();
   //updateCoverTransition();
   updateProgressBar(scrollPercentage);
   console.log("scroll percent: " + scrollPercentage);
   
   // If we changed sections update the background and content
   if(newSectionIndex != sectionIndex)
   {
      console.log("new section index: " + sectionIndex);
      setBgImage(newSectionIndex);
      setCurrentContent(newSectionIndex, sectionIndex);
   }

   // Update the section index so it can be used next time
   sectionIndex = newSectionIndex;
}


/*
   Handle all front page window resizes
*/
function fp_resize(){
   updateContentLayout();
   updateBackgroundSize();
}


/*
   Finds the total height of the document and sets a global variable.
   Implementation is kind of weird because of some browser compatibility issues. 
*/
function calculateDocumentHeight(){
   var body = document.body;
   var html = document.documentElement;
   documentHeight = Math.max( body.scrollHeight, body.offsetHeight, 
      html.clientHeight, html.scrollHeight, html.offsetHeight );
}


/*
   Use an empty div to give height to the page. This allows browsers to 
   use their normal scroll bar even though this page doesn't scroll normally.
*/
function setDocumentHeight(docHeight){
   document.getElementById(DOC_HEIGHT_DIV_NAME).style.height = docHeight + "px";
}


/*
   Returns the current scroll position as a percentage (0-100)
*/
function calculateScrollPosition(){
   let maxPageYOffset = documentHeight - window.innerHeight;
   return window.pageYOffset / maxPageYOffset * 100;   // Scroll percentage
}


/*
   Returns the index of the current scroll section on the front page
*/
function calculateSectionIndex(){
   let maxPageYOffset = documentHeight - window.innerHeight;
   let sectionSize = maxPageYOffset / NUM_PAGE_SECTIONS;
   let currentSection = Math.ceil(window.pageYOffset / sectionSize) -1;
   // Constrain section to valid range
   if(currentSection < 0){
      return 0;
   }
   else if(currentSection >= NUM_PAGE_SECTIONS){
      return NUM_PAGE_SECTIONS -1;
   }

   return currentSection;
}


/*
   HACKY ALERT**
   This function validates the input of a single specific email field and
   then enables or disables a specific submit button accordingly.
   Truly the opposite of reusable - but it does work...
*/
function validateEmailInput(){
   var inputElement = document.getElementById("form_4_1-element-5");
   var mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
   if(inputElement){
      var input = inputElement.value;
      if(input.match(mailformat)){
         document.getElementById("rm_next_form_page_button_4_1").disabled = false;
      }
      else{
         document.getElementById("rm_next_form_page_button_4_1").disabled = true;
      }
   }
}


function updateCoverTransition(){
   const BG_TRANS_BEGIN = 40;
   const BG_TRANS_END = 50;
   var bg_transition_mapping = 100 / (BG_TRANS_END - BG_TRANS_BEGIN);
   var bg_transition_percentage = 100 - currentPageScrollPercent * bg_transition_mapping + BG_TRANS_BEGIN;

   document.getElementById("fp-cover").style.opacity = bg_transition_percentage + "%";

   const SW1_TRANS_BEGIN = 0;
   const SW1_TRANS_END = 15;
   var sw1_trans_mapping = 100 / (SW1_TRANS_END - SW1_TRANS_BEGIN);
   var sw1_trans_percentage = currentPageScrollPercent * sw1_trans_mapping;
   var sw1_clip_edge_right = window.innerWidth * sw1_trans_percentage /100;
   document.getElementById("fp-cover-text-2").style.clip = "rect(0px, " + window.innerWidth + "px, 300px, " + sw1_clip_edge_right +"px)";

   const SW2_TRANS_BEGIN = 0;
   const SW2_TRANS_END = 20;
   var sw2_trans_mapping = 100 / (SW2_TRANS_END - SW2_TRANS_BEGIN);
   var sw2_trans_percentage = currentPageScrollPercent * sw2_trans_mapping;
   var sw2_clip_edge_right = window.innerWidth * sw2_trans_percentage /100;
   document.getElementById("fp-cover-text-1").style.clip = "rect(0px, " + window.innerWidth + "px, 300px, " + sw2_clip_edge_right +"px)";
}


// Load the js only after the page is loaded. Slow? Maybe. Necessary? Ask me later.
window.onload = fp_load;


// EXPORT FUNCTIONS
export {  
   fp_load
};